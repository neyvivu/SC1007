# Q1: 
////////////////////////////////////////////////////////////

#include "stdlib.h"
#include "stdio.h"

////////////////////////////////////////////////////////////

void insert(char *s,int n);
void removes(char *s, int n);

//////////////////////////////////////////////////////////
void main ()
{
	int n;
  	char *s;
	int choice;


	printf("How many characters do you want to input:");
	scanf("%d", &n);

	s=(char *)malloc((n+1)*sizeof(char));

    	if (s==NULL)
		{
		printf("can't allocate the memory!");
		return;
		}

	printf("Input the string:");
	scanf("%s",s);

	printf("The string is %s\n", s);

	do
		{
		printf("Do you want to 1-insert or 2-remove or 3-quit?:");
		scanf("%d",&choice);
		//getchar(); //to clear the return carriage in the buffer

		if (choice==1)
			insert(s,n);
		else if (choice==2)
			removes(s,n);
	}while (choice!=3);


}

//////////////////////////////////////////
void removes(char *s, int n)
{
  int i;
  for(i=0; i<n-1; i++){

      s[i] = s[i+1];
  }
  s[n-1] = '\0';
  printf("Resulting string: %s\n", s);

}

//////////////////////////////////////////
void insert(char *s, int n)
{
  char c;

  printf("What is the character you want to insert: ");

  scanf(" %c", &c);

  int i;
  if (strlen(s) >= n) {
      for(i=n-1; i>=0; i--) {
      s[i] = s[i-1];
      }
    }
  else {
    for(i=n-1; i>0;i--) {
      s[i] = s[i-1];
    }
  }

  s[0] = c;
  s[n+1] = '\0';


  printf("Resulting string: %s\n", s);
}

# Q2:
////////////////////////////////////////////////////////////


//#define _CRT_SECURE_NO_WARNINGS
#include <stdlib.h>
#include <stdio.h>

////////////////////////////////////////////////////////////

typedef struct _listnode{
	int item;
	struct _listnode *next;
} ListNode;


void main()
{
	ListNode *head, *p, *temp;
	int n;

	head=NULL;
	p=NULL;		// pointing to the last node in the list
	printf("Enter a list of numbers, terminated by the value -1:\n");

	do {
	  temp = (ListNode*) malloc(sizeof(ListNode));
	  scanf("%d", &temp->item);

	  if(temp->item == -1) {
	    free(temp);
	    break;
  	}

	temp->next = NULL;

	if(head == NULL) {
	    head = temp;
	  }
	else {
	    p->next = temp;
	  }

	p = temp;
	} while(1);

	printf("Current list: ");

  p = head;
  while(p != NULL) {
    printf("%d ", p->item);
    p = p->next;
  }

  printf("\n");
}

# Q3: 
#include <stdlib.h>
#include <stdio.h>

typedef struct _listnode{
	int item;
	struct _listnode *next;
} ListNode;

void printList(ListNode *head) {
    if (head==NULL)
      return;
    while (head != NULL) {
        printf("%d ", head->item);
        head = head->next;
    }
    printf("\n");
}

int searchList(ListNode *head, int value)
{
  int index = 0;
	ListNode *temp = head;
	while (temp != NULL) {
		if (temp->item == value) {
			return index;
		}
		temp = temp->next;
		index++;
	}
	return -1;
}

void main()
{
	ListNode *head, *p, *temp;
	int n;
  int index = 0;

	head=NULL;
	p=NULL;		// pointing to the last node in the list
	printf("Enter a list of numbers, terminated by the value -1:\n");

	while (1) {
		scanf("%d", &n);
		if (n == -1)
			break;

		temp = (ListNode *)malloc(sizeof(ListNode));
		if (temp == NULL) {
			exit(0); // Out of memory, exit
		}
		temp->item = n;
		temp->next = NULL;

		if (head == NULL) {
			head = temp;
			p = temp;
		} else {
			p->next = temp;
			p = temp;
		}
	}

	printf("Current list: ");
	printList(head);

	printf("Enter value to search for:");
	scanf("%d", &n);
	index = searchList(head, n);
	if (index != -1) {
		printf("Value %d found at index %d.\n", n, index);
	} else {
		printf("Value not found in the list.\n");
	}
}
